#!/bin/bash

indent() {
  sed -u 's/^/       /'
}

arrow() {
  sed -u 's/^/-----> /'
}

VERSION=stable
RUST_CARGO_BUILD_FLAGS="--release"

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

# Standard paranoia.
set -eu
set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output

# Record our Rust build environment configuration in an export file, in
# case another buildpack needs it to build Ruby gems that use Rust or
# something like that.
cat <<EOF > $BP_DIR/export
# Our rustup installation.
export RUSTUP_HOME="$CACHE_DIR/multirust"

# Our cargo installation.  We implicitly trust Rustup and Cargo
# to do the right thing when new versions are released.
export CARGO_HOME="$CACHE_DIR/cargo"

# Include binaries installed by cargo and rustup in our path.
PATH="\$CARGO_HOME/bin:\$PATH"
EOF

# Read our build environment back in and evaluate it so that we can use it.
. $BP_DIR/export

# Switch to our cache directory.
mkdir -p "$CACHE_DIR"
cd "$CACHE_DIR"

echo "Going to Cache directory $CACHE_DIR" | arrow

if [ -d "$CARGO_HOME" ]; then
    echo "Checking for new releases of Rust $VERSION channel" | arrow
    # It's possible that $VERSION has changed, or the `stable` channel has updated.
    rustup self update
    rustup update "$VERSION"
    rustup default "$VERSION"
else
    echo "Downloading rustup" | arrow
    curl https://sh.rustup.rs -sSf > rustup.sh
    chmod u+x rustup.sh
    echo "-----> Using rustup to install Rust channel $VERSION"
    ./rustup.sh -y --default-toolchain "$VERSION"
    rm rustup.sh
    source "$CARGO_HOME/env"
fi

# if [ ! -x "$CARGO_HOME/bin/rustc" ]; then
#   echo "failed: Cannot find Rust binaries at $CARGO_HOME"
#   exit 1
# else
#   echo "Found Rust binaries at $CARGO_HOME. Proceeding"
# fi

CARGO_TARGET_DIR="$CACHE_DIR/target"

echo "Building application using Cargo" | arrow
cd "$BUILD_DIR"
rm -rf target/
cargo build $RUST_CARGO_BUILD_FLAGS --target-dir $CARGO_TARGET_DIR
mkdir -p target/release
find "$CARGO_TARGET_DIR/release" -maxdepth 1 -type f -executable -exec cp -a -t target/release {} \;